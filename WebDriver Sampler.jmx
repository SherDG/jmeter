<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="WP486_URL" elementType="Argument">
            <stringProp name="Argument.name">WP486_URL</stringProp>
            <stringProp name="Argument.value">http://486.wordpress.imunify.local/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WP486_URLj" elementType="Argument">
            <stringProp name="Argument.name">WP486_URLj</stringProp>
            <stringProp name="Argument.value">486.wordpress.imunify.local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chromePATH" elementType="Argument">
            <stringProp name="Argument.name">chromePATH</stringProp>
            <stringProp name="Argument.value">D:\QA\JMETER-5.1.1\bin\chromedriver.exe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="false">
        <stringProp name="WebDriverConfig.proxy_type">AUTO_DETECT</stringProp>
        <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
        <stringProp name="WebDriverConfig.http_host"></stringProp>
        <intProp name="WebDriverConfig.http_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
        <stringProp name="WebDriverConfig.https_host"></stringProp>
        <intProp name="WebDriverConfig.https_port">8080</intProp>
        <stringProp name="WebDriverConfig.ftp_host"></stringProp>
        <intProp name="WebDriverConfig.ftp_port">8080</intProp>
        <stringProp name="WebDriverConfig.socks_host"></stringProp>
        <intProp name="WebDriverConfig.socks_port">8080</intProp>
        <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
        <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
        <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
        <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
        <stringProp name="ChromeDriverConfig.chromedriver_path">${__P(chromePATH,D:\QA\JMETER-5.1.1\bin\chromedriver.exe)}</stringProp>
        <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        <stringProp name="TestPlan.comments">chrome Driver Config</stringProp>
        <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
        <stringProp name="WebDriverConfig.driver_path"></stringProp>
        <boolProp name="WebDriverConfig.headless">false</boolProp>
        <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
        <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
        <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
        <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
        <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
      </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Cafe check" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">AUTO_DETECT</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">${chromePATH}</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
          <stringProp name="TestPlan.comments">chrome Driver Config</stringProp>
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">/home/dima/chromedriver-linux64/chromedriver</stringProp>
          <boolProp name="WebDriverConfig.headless">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="false">
          <stringProp name="WebDriverSampler.script">// WDS.sampleResult.sampleStart()
WDS.browser.get(&apos;http://jmeter-plugins.org&apos;)
// WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler Set Window" enabled="false">
          <stringProp name="WebDriverSampler.script">//WDS.sampleResult.sampleStart()
// Import the necessary classes
import org.openqa.selenium.Point;
import org.openqa.selenium.Dimension;

// Set window size
WDS.browser.manage().window().setPosition(new Point(0, 0));
WDS.browser.manage().window().setSize(new Dimension(1000, 900));

WDS.browser.get(&apos;http://jmeter-plugins.org&apos;)</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler - Click and Wait" enabled="false">
          <stringProp name="WebDriverSampler.script">//WDS.sampleResult.sampleStart()

// Import the necessary classes
import org.openqa.selenium.Point;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;

// Set window size
WDS.browser.manage().window().setPosition(new Point(0, 0));
WDS.browser.manage().window().setSize(new Dimension(1000, 900));

WDS.browser.get(&apos;https://devexpress.github.io/testcafe/example/&apos;)

// Assert checkbox with id=&quot;tried-test-cafe&quot; is checked
WebElement checkboxElement = WDS.browser.findElement(By.id(&quot;tried-test-cafe&quot;));
checkboxElement.click();
Thread.sleep(2000); // 2 seconds delay
if (!checkboxElement.isSelected()) {
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(&quot;Checkbox is not checked&quot;);
};
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler - Select and Implicit Wait" enabled="false">
          <stringProp name="WebDriverSampler.script">
// Import the necessary classes
import org.openqa.selenium.Point;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import org.openqa.selenium.support.ui.Select;

WDS.browser.get(&apos;https://devexpress.github.io/testcafe/example/&apos;);

// Set a global implicit wait for all findElement operations
WDS.browser.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

// Find the select element
WebElement selectElement = WDS.browser.findElement(By.id(&quot;preferred-interface&quot;));
Select dropdown = new Select(selectElement);

// Select &quot;Command Line&quot; option by visible text
dropdown.selectByVisibleText(&quot;JavaScript API&quot;);
Thread.sleep(2000); // 2 seconds delay
// Verify the selection
String selectedOption = dropdown.getFirstSelectedOption().getText();
if (!selectedOption.equals(&quot;JavaScript API&quot;)) {
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(&quot;Failed to select JavaScript API: &quot; + selectedOption);
};

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler - Type" enabled="false">
          <stringProp name="WebDriverSampler.script">
// Import the necessary classes
import org.openqa.selenium.Point;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import org.openqa.selenium.support.ui.Select;

WDS.browser.get(&apos;https://devexpress.github.io/testcafe/example/&apos;);

// Set a global implicit wait for all findElement operations
WDS.browser.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

// Assert checkbox with id=&quot;tried-test-cafe&quot; is checked
WebElement checkboxElement = WDS.browser.findElement(By.id(&quot;tried-test-cafe&quot;));
checkboxElement.click();
Thread.sleep(2000); // 2 seconds delay
if (!checkboxElement.isSelected()) {
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(&quot;Checkbox is not checked&quot;);
};

// Find the textarea element
WebElement name = WDS.browser.findElement(By.id(&quot;developer-name&quot;));

// Type text into the textarea
name.sendKeys(&quot;JMeter&quot;);

// Find the textarea element
WebElement commentArea = WDS.browser.findElement(By.id(&quot;comments&quot;));

// Type text into the textarea
commentArea.sendKeys(&quot;JMeter comment&quot;);

Thread.sleep(1000); // 1 seconds delay

// Click Submit button
// By data-testid
WebElement submitButton = WDS.browser.findElement(By.cssSelector(&quot;[data-testid=&apos;submit-button&apos;]&quot;));

submitButton.click();
Thread.sleep(1000); // 1 seconds delay

WebElement articleHeader = WDS.browser.findElement(By.id(&quot;article-header&quot;));
String result = articleHeader.getText();
if (!result.equals(&quot;Thank you, JMeter!&quot;)) {
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(&quot;Failed to switch to new page. Resulted text is: &quot; + result);
};
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler - Type and Assert" enabled="true">
          <stringProp name="WebDriverSampler.script">
// Import the necessary classes
import org.openqa.selenium.Point;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import org.openqa.selenium.support.ui.Select;

WDS.browser.get(&apos;https://devexpress.github.io/testcafe/example/&apos;);

// Set a global implicit wait for all findElement operations
WDS.browser.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

// Assert checkbox with id=&quot;tried-test-cafe&quot; is checked
WebElement checkboxElement = WDS.browser.findElement(By.id(&quot;tried-test-cafe&quot;));
checkboxElement.click();
Thread.sleep(2000); // 2 seconds delay
if (!checkboxElement.isSelected()) {
    WDS.sampleResult.setSuccessful(false);
    WDS.sampleResult.setResponseMessage(&quot;Checkbox is not checked&quot;);
};

// Find the textarea element
WebElement name = WDS.browser.findElement(By.id(&quot;developer-name&quot;));

// Type text into the textarea
name.sendKeys(&quot;JMeter&quot;);

// Find the textarea element
WebElement commentArea = WDS.browser.findElement(By.id(&quot;comments&quot;));

// Type text into the textarea
commentArea.sendKeys(&quot;JMeter comment&quot;);

// Click Submit button
// By data-testid
WebElement submitButton = WDS.browser.findElement(By.cssSelector(&quot;[data-testid=&apos;submit-button&apos;]&quot;));

submitButton.click();

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1261235451">Thank you, JMeter!</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler WP" enabled="false">
          <stringProp name="WebDriverSampler.script">// Importing packages (and all classes in package) from Java into Javascript
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var ui = JavaImporter(org.openqa.selenium.support.ui)
var wait = new support_ui.WebDriverWait(WDS.browser, 500000)

//Start WebDriver
WDS.sampleResult.sampleStart()

//Set window size
WDS.browser.manage().window().setPosition(new pkg.Point(0, 0))
WDS.browser.manage().window().setSize(new pkg.Dimension(1000, 900))

//Log In
WDS.browser.get([&apos;${WP486_URL}&apos;] + &apos;wp-login.php&apos;)
var login = WDS.browser.findElement(pkg.By.id(&quot;user_login&quot;));
login.clear();
login.sendKeys(&apos;admin&apos;);
var pass = WDS.browser.findElement(pkg.By.id(&quot;user_pass&quot;));
pass.sendKeys(&apos;password1&apos;);
var loginButton = WDS.browser.findElement(pkg.By.id(&quot;wp-submit&quot;));
loginButton.click();

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">/home/dima/chromedriver-linux64/chromedriver</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="WebDriverConfig.headless">false</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
